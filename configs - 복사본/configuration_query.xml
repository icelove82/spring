<?xml version="1.0" encoding="UTF-8"?>
<t3series>
	<queries>
		<query id='GetLanguages'>
			<ORACLE>
				SELECT LOCALE, LANG_KEY, LANG_VALUE
				FROM LANG_PACK
				WHERE 1=1 
				[AND LOCALE = ${LOCALE}]
				[AND LANG_KEY like '%'||${LANG_KEY}||'%']
				[AND LANG_VALUE like '%'||${LANG_VALUE}||'%']
				[AND LANG_KEY in (${RECENT_LANG_KEY})]
				ORDER BY LOCALE, LANG_KEY, LANG_VALUE
			</ORACLE>
			<MSSQL>
				SELECT LOCALE, LANG_KEY, LANG_VALUE
				FROM LANG_PACK
				WHERE 1=1 
				[AND LOCALE = ${LOCALE}]
				[AND LANG_KEY like '%'+${LANG_KEY}+'%']
				[AND LANG_VALUE like '%'+${LANG_VALUE}+'%']
				[AND LANG_KEY in (${RECENT_LANG_KEY})]
				ORDER BY LOCALE, LANG_KEY, LANG_VALUE
			</MSSQL>
			<MYSQL>
				SELECT LOCALE, LANG_KEY, LANG_VALUE
				FROM LANG_PACK
				WHERE 1=1 
				[AND LOCALE = ${LOCALE}]
				[AND LANG_KEY like CONCAT('%',${LANG_KEY},'%')]
				[AND LANG_VALUE like CONCAT('%',${LANG_VALUE},'%')]
				[AND LANG_KEY in (${RECENT_LANG_KEY})]
				ORDER BY LOCALE, LANG_KEY, LANG_VALUE
			</MYSQL>
		</query>
		<query id='SetLanguages'>
			<ORACLE>
				MERGE INTO LANG_PACK
				USING DUAL
				ON (LOCALE = ${LOCALE} AND LANG_KEY = ${LANG_KEY})
				WHEN NOT MATCHED THEN
					INSERT (LOCALE, LANG_KEY, LANG_VALUE)
					VALUES (${LOCALE},${LANG_KEY},${LANG_VALUE})
			</ORACLE>
			<MSSQL>
				IF NOT EXISTS (SELECT LOCALE, LANG_KEY FROM LANG_PACK WHERE LOCALE = ${LOCALE} AND LANG_KEY = ${LANG_KEY})
				BEGIN 
					INSERT INTO LANG_PACK (LOCALE, LANG_KEY, LANG_VALUE)
					VALUES (${LOCALE},${LANG_KEY},${LANG_VALUE}) 
				END
			</MSSQL>
			<MYSQL>
				INSERT INTO LANG_PACK(LOCALE, LANG_KEY, LANG_VALUE)
				VALUES (${LOCALE},${LANG_KEY},${LANG_VALUE})
			</MYSQL>
		</query>
		<query id='SetLanguages2'>
			<ORACLE>
				MERGE INTO LANG_PACK
				USING DUAL
				ON (LOCALE = ${LOCALE} AND LANG_KEY = ${LANG_KEY})
				WHEN MATCHED THEN 
					UPDATE SET LANG_VALUE = ${LANG_VALUE}
				WHEN NOT MATCHED THEN
					INSERT (LOCALE, LANG_KEY, LANG_VALUE)
					VALUES (${LOCALE},${LANG_KEY},${LANG_VALUE})
			</ORACLE>
			<MSSQL>
				IF NOT EXISTS (SELECT LOCALE, LANG_KEY FROM LANG_PACK WHERE LOCALE = ${LOCALE} AND LANG_KEY = ${LANG_KEY})
				BEGIN 
					INSERT INTO LANG_PACK (LOCALE, LANG_KEY, LANG_VALUE)
					VALUES (${LOCALE},${LANG_KEY},${LANG_VALUE}) 
				END
				ELSE
				BEGIN
					UPDATE LANG_PACK
					SET LANG_VALUE = ${LANG_VALUE}
					WHERE LOCALE = ${LOCALE} AND LANG_KEY = ${LANG_KEY}
				END
			</MSSQL>
			<MYSQL>
				INSERT INTO LANG_PACK(LOCALE, LANG_KEY, LANG_VALUE)
				VALUES (${LOCALE},${LANG_KEY},${LANG_VALUE})
				ON DUPLICATE KEY UPDATE LANG_VALUE = ${LANG_VALUE}
			</MYSQL>
		</query>
		<query id='GetLocales'>
			SELECT DISTINCT LOCALE
			FROM LANG_PACK
			ORDER BY LOCALE
		</query>
		<query id='GetLangKeys'>
			<ORACLE>
				SELECT DISTINCT LANG_KEY
				FROM LANG_PACK
				WHERE 1=1
				[AND LANG_KEY like '%'||${LANG_KEY}||'%']
			</ORACLE>
			<MSSQL>
				SELECT DISTINCT LANG_KEY
				FROM LANG_PACK
				WHERE 1=1
				[AND LANG_KEY like '%'+${LANG_KEY}+'%']
			</MSSQL>
			<MYSQL>
				SELECT DISTINCT LANG_KEY
				FROM LANG_PACK
				WHERE 1=1
				[AND LANG_KEY like CONCAT('%',${LANG_KEY},'%')]
				ORDER BY LANG_KEY
			</MYSQL>
		</query>
		<query id='GetLangVals'>
			SELECT DISTINCT LANG_VALUE
			FROM LANG_PACK
			ORDER BY LANG_VALUE
		</query>
		<query id='DeleteLangValue'>
			DELETE FROM LANG_PACK
			WHERE LOCALE = ${LOCALE}
			AND LANG_KEY = ${LANG_KEY}
		</query>
		<query id='GetAcceptanceByUser2'>
			SELECT MENU_ID, USABILITY
			FROM PERMISSION_MGMT
			WHERE USER_ID = ${USER_ID} AND OPERATION_TYPE='MENU_VIEW'
		</query>
		<query id='GetLocaleCount'>
			SELECT COUNT(DISTINCT LOCALE)
			FROM LANG_PACK
			WHERE LOCALE = ${LOCALE}
		</query>
		<query id='GetLangValue'>
			SELECT LANG_VALUE 
			FROM LANG_PACK
			WHERE LOCALE = ${LOCALE}
			AND LANG_KEY = ${LANG_KEY}
		</query>
		<query id='GetLangKeyCount'>
			SELECT COUNT(LANG_KEY)
			FROM LANG_PACK
			WHERE LOCALE = ${LOCALE}
			AND LANG_KEY = ${LANG_KEY}
		</query>
		<query id='DeleteLocale'>
			DELETE FROM LANG_PACK
			WHERE LOCALE = ${LOCALE}
		</query>
		<query id='DeleteLangKey'>
			DELETE FROM LANG_PACK
			WHERE LANG_KEY = ${LANG_KEY}
		</query>
		<query id='getOperationTypes'>
			SELECT DISTINCT OPERATION_TYPE
			FROM PERMISSION_MGMT
		</query>
		<query id='GetPermissionByUser'>
			SELECT USER_ID, MENU_ID, OPERATION_TYPE, USABILITY
			FROM PERMISSION_MGMT
			WHERE USER_ID = ${USER_ID}
			ORDER BY MENU_ID, OPERATION_TYPE
		</query>
		<query id='GetPermissionByGroup'>
			SELECT GRP_CD, MENU_ID, OPERATION_TYPE, USABILITY
			FROM GROUP_PERMISSION_MGMT
			WHERE GRP_CD = ${GRP_CD}
			ORDER BY MENU_ID, OPERATION_TYPE
		</query>
		<query id='SetPermissionByUser'>
			<ORACLE>
				MERGE INTO PERMISSION_MGMT
				USING DUAL
				ON (USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE})
				WHEN MATCHED THEN
					UPDATE SET USABILITY = ${USABILITY}
				WHEN NOT MATCHED THEN
					INSERT (USER_ID, MENU_ID, OPERATION_TYPE, USABILITY)
					VALUES (${USER_ID},${MENU_ID},${OPERATION_TYPE},${USABILITY})
			</ORACLE>
			<MSSQL>
				IF NOT EXISTS (SELECT USER_ID, MENU_ID, OPERATION_TYPE FROM PERMISSION_MGMT WHERE USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE})
				BEGIN
					INSERT PERMISSION_MGMT (USER_ID, MENU_ID, OPERATION_TYPE, USABILITY)
					VALUES (${USER_ID},${MENU_ID},${OPERATION_TYPE},${USABILITY})
				END
				ELSE
				BEGIN
					UPDATE PERMISSION_MGMT
					SET USABILITY = ${USABILITY}
					WHERE USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE}
				END
			</MSSQL>
			<MYSQL>
				INSERT INTO PERMISSION_MGMT(USER_ID, MENU_ID, OPERATION_TYPE, USABILITY)
				VALUES (${USER_ID},${MENU_ID},${OPERATION_TYPE},${USABILITY})
				ON DUPLICATE KEY UPDATE USABILITY = ${USABILITY}
			</MYSQL>
		</query>
		<query id='DeletePermissionByUser'>
			DELETE FROM PERMISSION_MGMT
			WHERE USER_ID = ${USER_ID}
		</query>
		<query id='SetPermissionByGroup'>
			<ORACLE>
				MERGE INTO GROUP_PERMISSION_MGMT
				USING DUAL
				ON (GRP_CD = ${GRP_CD} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE})
				WHEN MATCHED THEN
					UPDATE SET USABILITY = ${USABILITY}
				WHEN NOT MATCHED THEN
					INSERT (GRP_CD, MENU_ID, OPERATION_TYPE, USABILITY)
					VALUES (${GRP_CD},${MENU_ID},${OPERATION_TYPE},${USABILITY})
			</ORACLE>
			<MSSQL>
				IF NOT EXISTS (SELECT GRP_CD, MENU_ID, OPERATION_TYPE FROM GROUP_PERMISSION_MGMT WHERE GRP_CD = ${GRP_CD} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE})
				BEGIN
					INSERT GROUP_PERMISSION_MGMT (GRP_CD, MENU_ID, OPERATION_TYPE, USABILITY)
					VALUES (${GRP_CD},${MENU_ID},${OPERATION_TYPE},${USABILITY})
				END
				ELSE
				BEGIN
					UPDATE GROUP_PERMISSION_MGMT
					SET USABILITY = ${USABILITY}
					WHERE GRP_CD = ${GRP_CD} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE}
				END
			</MSSQL>
			<MYSQL>
				INSERT INTO GROUP_PERMISSION_MGMT(GRP_CD, MENU_ID, OPERATION_TYPE, USABILITY)
				VALUES (${GRP_CD},${MENU_ID},${OPERATION_TYPE},${USABILITY})
				ON DUPLICATE KEY UPDATE USABILITY = ${USABILITY}
			</MYSQL>
		</query>
		<query id='GetUserByGroup'>
			SELECT USER_ID
			FROM USER_GROUP
			WHERE GRP_CD = ${GRP_CD}
		</query>
		<!-- <query id='DeletePermissionByUser'>
			DELETE FROM PERMISSION_MGMT
			WHERE USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID} AND OPERATION_TYPE = ${OPERATION_TYPE}
		</query> -->
		<query id='GetPermissionOnViewByUser'>
			SELECT USER_ID, MENU_ID, OPERATION_TYPE, USABILITY
			FROM PERMISSION_MGMT
			WHERE  MENU_ID = ${MENU_ID}
			and (USER_ID =${USER_ID} or USER_ID in (select USER_ID from DELEGATION where DELEGATION_USER_ID=${USER_ID}))			
		</query>
		
		<!-- USER BOOKMARK -->
		<query id='GetBookmarkedViewsByUser'>
			SELECT USER_ID, MENU_ID, BOOKMARK
			FROM VIEW_BOOKMARK
			WHERE USER_ID = ${USER_ID}
			ORDER BY MENU_ID
		</query>
		<query id='SetBookmarkedViewsByUser'>
			<ORACLE>
				MERGE INTO VIEW_BOOKMARK
				USING DUAL
				ON (USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID})
				WHEN MATCHED THEN
					UPDATE SET BOOKMARK = ${BOOKMARK}
				WHEN NOT MATCHED THEN
					INSERT (USER_ID, MENU_ID, BOOKMARK)
					VALUES (${USER_ID},${MENU_ID},${BOOKMARK})
			</ORACLE>
			<MSSQL>
				IF NOT EXISTS (SELECT USER_ID, MENU_ID FROM VIEW_BOOKMARK WHERE USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID})
				BEGIN 
					INSERT INTO VIEW_BOOKMARK (USER_ID, MENU_ID, BOOKMARK)
					VALUES (${USER_ID},${MENU_ID},${BOOKMARK})
				END
				ELSE
				BEGIN
					UPDATE VIEW_BOOKMARK
					SET BOOKMARK = ${BOOKMARK}
					WHERE USER_ID = ${USER_ID} AND MENU_ID = ${MENU_ID}
				END
			</MSSQL>
			<MYSQL>
				INSERT INTO VIEW_BOOKMARK(USER_ID, MENU_ID, BOOKMARK)
				VALUES (${USER_ID},${MENU_ID},${BOOKMARK})
				ON DUPLICATE KEY UPDATE BOOKMARK = ${BOOKMARK}
			</MYSQL>
		</query>
		
		<query id='SetSystemAccessLog'>
			<ORACLE>
				INSERT INTO SYSTEM_ACCESS_LOG(SEQ, USER_ID, USER_NAME, USER_IP, ACCESS_DATE) 
				VALUES((SELECT NVL(MAX(SEQ) + 1, 1) FROM SYSTEM_ACCESS_LOG), ${USER_ID}, ${USER_NAME}, ${USER_IP}, SYSDATE)
			</ORACLE>
			<MSSQL>
				INSERT INTO SYSTEM_ACCESS_LOG(SEQ, USER_ID, USER_NAME, USER_IP, ACCESS_DATE) 
				VALUES((SELECT ISNULL(MAX(SEQ) + 1, 1) FROM SYSTEM_ACCESS_LOG), ${USER_ID}, ${USER_NAME}, ${USER_IP}, GETDATE())
			</MSSQL>
			<MYSQL>
				INSERT INTO SYSTEM_ACCESS_LOG(SEQ, USER_ID, USER_NAME, USER_IP, ACCESS_DATE) 
				SELECT IFNULL(MAX(SEQ) + 1, 1), ${USER_ID}, ${USER_NAME}, ${USER_IP}, NOW()
				FROM SYSTEM_ACCESS_LOG
			</MYSQL>
		</query>
		<query id='GetSystemAccessLog'>
			<ORACLE>
				SELECT SEQ, USER_ID, USER_NAME, USER_IP, TO_CHAR(ACCESS_DATE, 'YYYY-MM-DD HH24:MI:SS') AS ACCESS_DATE
				FROM SYSTEM_ACCESS_LOG
				WHERE 1=1
				[AND USER_NAME like '%'||${USER_NAME}||'%']
				AND ACCESS_DATE 
				BETWEEN TO_DATE(${DATETIME_FROM},'YYYY-MM-DD HH24:MI:SS') 
				AND TO_DATE(${DATETIME_TO},'YYYY-MM-DD HH24:MI:SS')
			</ORACLE>
			<MSSQL>
				SELECT SEQ, USER_ID, USER_NAME, USER_IP, CONVERT(CHAR(19), ACCESS_DATE, 20) AS ACCESS_DATE
				FROM SYSTEM_ACCESS_LOG
				WHERE 1=1
				[AND USER_NAME like '%'+${USER_NAME}+'%']
				AND ACCESS_DATE
				BETWEEN CONVERT(DATETIME, ${DATETIME_FROM}) 
				AND CONVERT(DATETIME, ${DATETIME_TO})
			</MSSQL>
			<MYSQL>
				SELECT SEQ, USER_ID, USER_NAME, USER_IP, DATE_FORMAT(ACCESS_DATE, '%Y-%m-%d %H:%i:%s') AS ACCESS_DATE
				FROM SYSTEM_ACCESS_LOG
				WHERE 1=1
				[AND USER_NAME like CONCAT('%',${USER_NAME},'%')]
				AND ACCESS_DATE 
				BETWEEN STR_TO_DATE(${DATETIME_FROM},'%Y-%m-%d %H:%i:%s') 
				AND STR_TO_DATE(${DATETIME_TO},'%Y-%m-%d %H:%i:%s')
			</MYSQL>
		</query>
		<query id='SetViewAccessLog'>
			<ORACLE>
				INSERT INTO VIEW_ACCESS_LOG(SEQ, USER_ID, USER_NAME, USER_IP, VIEW_ID, VIEW_NAME, ACCESS_DATE) 
				VALUES((SELECT NVL(MAX(SEQ) + 1, 1) FROM VIEW_ACCESS_LOG), ${USER_ID}, ${USER_NAME}, ${USER_IP}, ${VIEW_ID}, ${VIEW_NAME}, SYSDATE)
			</ORACLE>
			<MSSQL>
				INSERT INTO VIEW_ACCESS_LOG(SEQ, USER_ID, USER_NAME, USER_IP, VIEW_ID, VIEW_NAME, ACCESS_DATE) 
				VALUES((SELECT ISNULL(MAX(SEQ) + 1, 1) FROM VIEW_ACCESS_LOG), ${USER_ID}, ${USER_NAME}, ${USER_IP}, ${VIEW_ID}, ${VIEW_NAME}, GETDATE())
			</MSSQL>
			<MYSQL>
				INSERT INTO VIEW_ACCESS_LOG(SEQ, USER_ID, USER_NAME, USER_IP, VIEW_ID, VIEW_NAME, ACCESS_DATE)
				SELECT IFNULL(MAX(SEQ) + 1, 1), ${USER_ID}, ${USER_NAME}, ${USER_IP}, ${VIEW_ID}, ${VIEW_NAME}, NOW()
				FROM VIEW_ACCESS_LOG
			</MYSQL>
		</query>
		<query id='GetViewAccessLog'>
			<ORACLE>
				SELECT SEQ, USER_ID, USER_NAME, USER_IP, VIEW_ID, VIEW_NAME, TO_CHAR(ACCESS_DATE, 'YYYY-MM-DD HH24:MI:SS') AS ACCESS_DATE
				FROM VIEW_ACCESS_LOG
				WHERE 1=1
				[AND USER_NAME like '%'||${USER_NAME}||'%']
				[AND VIEW_NAME like '%'||${VIEW_NAME}||'%']
				AND ACCESS_DATE
				BETWEEN TO_DATE(${DATETIME_FROM},'YYYY-MM-DD HH24:MI:SS')
				AND TO_DATE(${DATETIME_TO},'YYYY-MM-DD HH24:MI:SS')
			</ORACLE>
			<MSSQL>
				SELECT SEQ, USER_ID, USER_NAME, USER_IP, VIEW_ID, VIEW_NAME, CONVERT(CHAR(19), ACCESS_DATE, 20) AS ACCESS_DATE
				FROM VIEW_ACCESS_LOG
				WHERE 1=1
				[AND USER_NAME like '%'+${USER_NAME}+'%']
				[AND VIEW_NAME like '%'+${VIEW_NAME}+'%']
				AND ACCESS_DATE
				BETWEEN CONVERT(DATETIME, ${DATETIME_FROM})
				AND CONVERT(DATETIME, ${DATETIME_TO})
			</MSSQL>
			<MYSQL>
				SELECT SEQ, USER_ID, USER_NAME, USER_IP, VIEW_ID, VIEW_NAME, DATE_FORMAT(ACCESS_DATE, '%Y-%m-%d %H:%i:%s') AS ACCESS_DATE
				FROM VIEW_ACCESS_LOG
				WHERE 1=1
				[AND USER_NAME like CONCAT('%',${USER_NAME},'%')]
				[AND VIEW_NAME like CONCAT('%',${VIEW_NAME},'%')]
				AND ACCESS_DATE
				BETWEEN STR_TO_DATE(${DATETIME_FROM},'%Y-%m-%d %H:%i:%s')
				AND STR_TO_DATE(${DATETIME_TO},'%Y-%m-%d %H:%i:%s')
			</MYSQL>
		</query>
		<query id='SetViewExecuteTime'>
			<ORACLE>
				INSERT INTO VIEW_EXECUTE_TIME(EXECUTE_DATE, VIEW_ID, VIEW_NAME, ACTION_ID, USER_ID, USER_NAME, USER_IP, USER_BROWSER, EXECUTE_TIME)
				VALUES(SYSDATE, ${VIEW_ID}, ${VIEW_NAME}, ${ACTION_ID}, ${USER_ID}, ${USER_NAME}, ${USER_IP}, ${USER_BROWSER}, ${EXECUTE_TIME})
			</ORACLE>
			<MSSQL>
				INSERT INTO VIEW_EXECUTE_TIME(EXECUTE_DATE, VIEW_ID, VIEW_NAME, ACTION_ID, USER_ID, USER_NAME, USER_IP, USER_BROWSER, EXECUTE_TIME)
				VALUES(GETDATE(), ${VIEW_ID}, ${VIEW_NAME}, ${ACTION_ID}, ${USER_ID}, ${USER_NAME}, ${USER_IP}, ${USER_BROWSER}, ${EXECUTE_TIME})
			</MSSQL>
			<MYSQL>
				INSERT INTO VIEW_EXECUTE_TIME(EXECUTE_DATE, VIEW_ID, VIEW_NAME, ACTION_ID, USER_ID, USER_NAME, USER_IP, USER_BROWSER, EXECUTE_TIME)
				VALUES(NOW(), ${VIEW_ID}, ${VIEW_NAME}, ${ACTION_ID}, ${USER_ID}, ${USER_NAME}, ${USER_IP}, ${USER_BROWSER}, ${EXECUTE_TIME})
			</MYSQL>
		</query>
		<query id='RemoveViewExecuteTime'>
			<ORACLE>
				DELETE FROM VIEW_EXECUTE_TIME
				WHERE EXECUTE_DATE = TO_DATE(${EXECUTE_DATE},'YYYY-MM-DD HH24:MI:SS')
				AND VIEW_ID = ${VIEW_ID}
				AND ACTION_ID = ${ACTION_ID}
				AND USER_ID= ${USER_ID}
			</ORACLE>
			<MSSQL>
				DELETE FROM VIEW_EXECUTE_TIME
				WHERE EXECUTE_DATE = CONVERT(DATETIME, ${EXECUTE_DATE})
				AND VIEW_ID = ${VIEW_ID}
				AND ACTION_ID = ${ACTION_ID}
				AND USER_ID= ${USER_ID}
			</MSSQL>
			<MYSQL>
				DELETE FROM VIEW_EXECUTE_TIME
				WHERE EXECUTE_DATE = STR_TO_DATE(${EXECUTE_DATE},'%Y-%m-%d %H:%i:%s')
				AND VIEW_ID = ${VIEW_ID}
				AND ACTION_ID = ${ACTION_ID}
				AND USER_ID= ${USER_ID}
			</MYSQL>
		</query>
		<query id='GetViewExecuteTime'>
			<ORACLE>
				SELECT TO_CHAR(EXECUTE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS EXECUTE_DATE, VIEW_ID, VIEW_NAME, ACTION_ID, USER_ID, USER_NAME, USER_IP, USER_BROWSER, EXECUTE_TIME
				FROM VIEW_EXECUTE_TIME
				WHERE 1=1
				[AND USER_NAME like '%'||${USER_NAME}||'%']
				[AND VIEW_NAME like '%'||${VIEW_NAME}||'%']
				AND EXECUTE_DATE
				BETWEEN TO_DATE(${DATETIME_FROM},'YYYY-MM-DD HH24:MI:SS')
				AND TO_DATE(${DATETIME_TO},'YYYY-MM-DD HH24:MI:SS')
			</ORACLE>
			<MSSQL>
				SELECT CONVERT(CHAR(19), EXECUTE_DATE, 20) AS EXECUTE_DATE, VIEW_ID, VIEW_NAME, ACTION_ID, USER_ID, USER_NAME, USER_IP, USER_BROWSER, EXECUTE_TIME
				FROM VIEW_EXECUTE_TIME
				WHERE 1=1
				[AND USER_NAME like '%'+${USER_NAME}+'%']
				[AND VIEW_NAME like '%'+${VIEW_NAME}+'%']
				AND EXECUTE_DATE
				BETWEEN CONVERT(DATETIME, ${DATETIME_FROM})
				AND CONVERT(DATETIME, ${DATETIME_TO})
			</MSSQL>
			<MYSQL>
				SELECT DATE_FORMAT(EXECUTE_DATE, '%Y-%m-%d %H:%i:%s') AS EXECUTE_DATE, VIEW_ID, VIEW_NAME, ACTION_ID, USER_ID, USER_NAME, USER_IP, USER_BROWSER, EXECUTE_TIME
				FROM VIEW_EXECUTE_TIME
				WHERE 1=1
				[AND USER_NAME like CONCAT('%',${USER_NAME},'%')]
				[AND VIEW_NAME like CONCAT('%',${VIEW_NAME},'%')]
				AND EXECUTE_DATE
				BETWEEN STR_TO_DATE(${DATETIME_FROM},'%Y-%m-%d %H:%i:%s')
				AND STR_TO_DATE(${DATETIME_TO},'%Y-%m-%d %H:%i:%s')
			</MYSQL>
		</query>
		<!-- temporary for SASS -->
		<query id='regSaasUser'>
			<MSSQL>
				INSERT INTO USERS(USER_ID, NAME, DEPARTMENT, BUSSINESS_VALUE, EMAIL, NATION) 
				VALUES(${USER_ID}, ${NAME}, ${DEPARTMENT}, ${BUSSINESS_VALUE}, ${EMAIL}, ${NATION});
			</MSSQL>
		</query>
		<query id='getTemplateList'>
			<MSSQL>				
				SELECT TEMPLATE_ID, TEMPLATE_DESCRIPTION
				FROM SASS_TEMPLATE_MGMT
			</MSSQL>
		</query>
		<query id='getMarkedViews'>
			SELECT TEMPLATE_ID, MENU_ID, DEFAULT_MENU_YN
			FROM SASS_MENU_ON_TEMPLATE
			WHERE TEMPLATE_ID = ${TEMPLATE_ID}
			ORDER BY MENU_ID
		</query>
		<query id='setMenuOnTemplate'>
			<MSSQL>
				IF NOT EXISTS (SELECT TEMPLATE_ID, MENU_ID FROM SASS_MENU_ON_TEMPLATE WHERE TEMPLATE_ID = ${TEMPLATE_ID} AND MENU_ID = ${MENU_ID})
				BEGIN 
					INSERT INTO SASS_MENU_ON_TEMPLATE (TEMPLATE_ID, MENU_ID, DEFAULT_MENU_YN)
					VALUES (${TEMPLATE_ID},${MENU_ID},${DEFAULT_MENU_YN})
				END
				ELSE
				BEGIN
					UPDATE SASS_MENU_ON_TEMPLATE
					SET DEFAULT_MENU_YN = ${DEFAULT_MENU_YN}
					WHERE TEMPLATE_ID = ${TEMPLATE_ID} AND MENU_ID = ${MENU_ID}
				END
			</MSSQL>
		</query>	
			
		<query id ='GetDelegationUsers'>
			<ORACLE>
				SELECT A.USER_ID, B.NAME AS USER_NM, A.DELEGATION_USER_ID, C.NAME AS DELEGATION_USER_NM,  A.APPY_STRT_DTTM, A.APPY_END_DTTM, A.CREATE_BY, A.CREATE_DTTM, A.MODIFY_BY, A.MODIFY_DTTM
				  FROM DELEGATION A
				       LEFT OUTER JOIN
				       USERS B
				    ON(A.USER_ID = B.USER_ID)
				       LEFT OUTER JOIN
				       USERS C
				    ON(A.DELEGATION_USER_ID = C.USER_ID)
				WHERE 1=1
				[AND A.USER_ID 		        LIKE '%' || ${USER_ID} || '%']
				[AND A.DELEGATION_USER_ID   LIKE '%' || ${DELEGATION_USER_ID} || '%']
			</ORACLE>
			<MSSQL>
				SELECT A.USER_ID, B.NAME AS USER_NM, A.DELEGATION_USER_ID, C.NAME AS DELEGATION_USER_NM,  A.APPY_STRT_DTTM, A.APPY_END_DTTM, A.CREATE_BY, A.CREATE_DTTM, A.MODIFY_BY, A.MODIFY_DTTM
				  FROM DELEGATION A
				       LEFT OUTER JOIN
				       USERS B
				    ON(A.USER_ID = B.USER_ID)
				       LEFT OUTER JOIN
				       USERS C
				    ON(A.DELEGATION_USER_ID = C.USER_ID)
				WHERE 1=1
				[AND A.USER_ID like '%'+${USER_ID}+'%']
				[AND A.DELEGATION_USER_ID like '%'+${DELEGATION_USER_ID}+'%']
			</MSSQL>
			<MYSQL>
				SELECT A.USER_ID, B.NAME AS USER_NM, A.DELEGATION_USER_ID, C.NAME AS DELEGATION_USER_NM,  A.APPY_STRT_DTTM, A.APPY_END_DTTM, A.CREATE_BY, A.CREATE_DTTM, A.MODIFY_BY, A.MODIFY_DTTM
				  FROM DELEGATION A
				       LEFT OUTER JOIN
				       USERS B
				    ON(A.USER_ID = B.USER_ID)
				       LEFT OUTER JOIN
				       USERS C
				    ON(A.DELEGATION_USER_ID = C.USER_ID)
				WHERE 1=1
				[AND A.USER_ID like CONCAT('%',${USER_ID},'%')]
				[AND A.DELEGATION_USER_ID like CONCAT('%',${DELEGATION_USER_ID},'%')]
			</MYSQL>
		</query>
		
		<query id ='SetDelegationUsers'>
			<ORACLE>
				MERGE INTO DELEGATION
				USING DUAL
				ON (USER_ID = ${USER_ID} AND DELEGATION_USER_ID = ${DELEGATION_USER_ID})
				WHEN MATCHED THEN 
					UPDATE SET
						[APPY_STRT_DTTM =  ${APPY_STRT_DTTM} , ]
						[APPY_END_DTTM  =  ${APPY_END_DTTM}  , ] 
						[MODIFY_BY      =  ${MODIFY_BY}      , ] 
						[MODIFY_DTTM    =  ${MODIFY_DTTM}      ] 
				WHEN NOT MATCHED THEN
					INSERT (USER_ID, DELEGATION_USER_ID, APPY_STRT_DTTM, APPY_END_DTTM, CREATE_BY, CREATE_DTTM, MODIFY_BY, MODIFY_DTTM)
					VALUES (${USER_ID},${DELEGATION_USER_ID},${APPY_STRT_DTTM},${APPY_END_DTTM},${CREATE_BY},${CREATE_DTTM},${MODIFY_BY},${MODIFY_DTTM})
			</ORACLE>	
			<MSSQL>
				IF NOT EXISTS (SELECT USER_ID, DELEGATION_USER_ID FROM DELEGATION WHERE USER_ID = ${USER_ID} AND DELEGATION_USER_ID = ${DELEGATION_USER_ID})
				BEGIN 
					INSERT INTO DELEGATION (USER_ID, DELEGATION_USER_ID, APPY_STRT_DTTM, APPY_END_DTTM, CREATE_BY, CREATE_DTTM, MODIFY_BY, MODIFY_DTTM)
					VALUES (${USER_ID},${DELEGATION_USER_ID},${APPY_STRT_DTTM},${APPY_END_DTTM},${CREATE_BY},${CREATE_DTTM},${MODIFY_BY},${MODIFY_DTTM})
				END
				ELSE
				BEGIN
					UPDATE DELEGATION
					SET APPY_STRT_DTTM = ${APPY_STRT_DTTM}, APPY_END_DTTM = ${APPY_END_DTTM}, MODIFY_BY = ${MODIFY_BY}, MODIFY_DTTM = ${MODIFY_DTTM}
					WHERE USER_ID = ${USER_ID} AND DELEGATION_USER_ID = ${DELEGATION_USER_ID}
				END
			</MSSQL>
			<MYSQL>
				INSERT INTO DELEGATION(USER_ID, DELEGATION_USER_ID, APPY_STRT_DTTM, APPY_END_DTTM, MODIFY_BY, MODIFY_DTTM)
				VALUES (${USER_ID},${DELEGATION_USER_ID},${APPY_STRT_DTTM},${APPY_END_DTTM},${MODIFY_BY},${MODIFY_DTTM})
				ON DUPLICATE KEY UPDATE USER_ID = ${USER_ID} AND DELEGATION_USER_ID = ${DELEGATION_USER_ID}
			</MYSQL>
		</query>
		
		<query id = 'DeleteDelegationUsers'>
			DELETE FROM DELEGATION  
			WHERE USER_ID = ${USER_ID} AND DELEGATION_USER_ID = ${DELEGATION_USER_ID}
		</query>
		<query id='GetMenuBadge'>
			<ORACLE>
				SELECT MENU_ID, BADGE_CONTENT, EXPIRED_TIME
				FROM MENU_BADGE
				WHERE SYSDATE &lt; EXPIRED_TIME
			</ORACLE>
			<MSSQL>
				SELECT MENU_ID, BADGE_CONTENT, EXPIRED_TIME
				FROM MENU_BADGE
				WHERE GETDATE() &lt; EXPIRED_TIME
			</MSSQL>
		</query>
<!-- 		<query id='checkEmail'> -->
<!-- 			SELECT COUNT(USER_ID) USER_COUNT -->
<!-- 			FROM SASS_USER -->
<!-- 			WHERE USER_ID = ${USER_ID} -->
<!-- 		</query> -->
<!-- 		<query id='checkApplicationId'> -->
<!-- 			SELECT COUNT(APPLICATION_ID) APPLICATION_ID_COUNT -->
<!-- 			FROM SASS_APPLICATION_ON_USER -->
<!-- 			WHERE APPLICATION_ID = ${APPLICATION_ID} -->
<!-- 		</query> -->
<!-- 		<query id='registUserQuery'> -->
<!-- 			INSERT INTO SASS_USER (USER_ID, USER_PW) -->
<!-- 			VALUES (${USER_ID},${USER_PW}) -->
<!-- 		</query> -->
<!-- 		<query id='registApplicationIDQuery'> -->
<!-- 			INSERT INTO SASS_APPLICATION_ON_USER (USER_ID, APPLICATION_ID) -->
<!-- 			VALUES (${USER_ID},${APPLICATION_ID}) -->
<!-- 		</query> -->
<!-- 		<query id='loginSystem'> -->
<!-- 			SELECT COUNT(USER_ID) USER_COUNT -->
<!-- 			FROM SASS_USER -->
<!-- 			WHERE USER_ID = ${USER_ID} -->
<!-- 			AND USER_PW = ${USER_PW} -->
<!-- 		</query> -->
	</queries>
</t3series>